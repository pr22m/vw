//---------- Игрок
Игрок (player)
{
  "name": "Александр",
  "vk_id": <идентификатор Вконтакте>,
	"статистика" : {
		"games" : 50,
		"wins" : 15,
		"ничья" : 10,
    "virus" : [{virus_id1}, {virus_id}, ...]
	}
}

//---------- Игрок (Конец)


//---------- Вирус
Координаты - должны быть целыми числами (исходим
из игрового поля 100х100 или друго-го конечного
размера).

Клетка вируса (virus_cell){
  "cell_id" : <id>,
  "игрок" : "1",
  "x" : 40,
  "y" : 50,
  "health" : 5,
  "strength" : 2,
  "deffence" : 2
}

Вирус (virus)
{
  "name": "Супер вирус",
  "owner": <id игрока-владельца>,
	"параметры" : {											
		"hits" : 10,
		"health" : 5
		"strength" : 2,
		"deffence" : 2,
		...
	},
	"логика" : {объект в соотвествующем формате}
}

virus_cell не храним в объекте вирус. Все это хранится в отдельном месте (массив или объект). Идентификация клетки будет происходить по номеру игрока внутри (1 или 2). Хранение virus_cell отдельно обусловлено необходимостью обработки данного массива целиком (всех сразу перемешали рандомом на каждой итерации и пошли обрабатывать. По крайней мере я вижу такой способ обработки клеток)

//---------- Вирус (Конец)


//---------- Игра
Игра (game){
	options : {														//Объект  настроек на будущее. На первый вариант игры
		"лимит циклов" : 5000,							//тут будет парамер на количество итераций на игру
		"размер_поля" : 100,
		..
		},
	}
	"вирусы" : [													//Массив вирусов, т.к. в будущем возможна игра 3, 4, может и больше вирусов в игре одновременно
		"1" : вирус_id,											//Ключи 1, 2 и т.д. будут использоваться как маркеры вирусов на игровом поле
		...], 
	игровое_поле : 												//Массив текущего состояния игрового поля. Массив "двумерный", на сколько я понимаю - такое возможно в javascript
		[[{1 : virus_cell_id}], []],				//Значением двумерного массива является объект с ключем - маркер игрока и значением id конкретной клетки с параметрами
	"клетки_вирусов" : [
		{"клетка_вируса1"}, ...							//Массив клеток вирусов (все клетки всех игроков в куче)
	],
	состояние_игры : {										//Определяет текущее состояние игры:
		"статус" : "начало" || "итерации" || "завершена",
		"текущая_итерация" : 100
	},
	результат_ игры : {										//объект, описывающий результат игры, этот объект храним для "просмотра" игры и информации о ней в будущем
		"номер_игры" : id,
		"дата_игры" : "дата",
		"размер_поля" : 100,								//подразумеваем квадрат
		"количество_итераций" : 1853,
		"кто_победил" : "игрок_1" || "игрок_2" || ... || "ничья?",
		"тип победы" : "убил_противника" || "занял_большую_площадь_к_концу_игры_по_лимиту",
		"данные_по_игрокам" : {						
			"игрок_1" : {
				"вирус_игрока" : "название",		//Тут, возможно, нужно будет хранить объект с характеристиками вируса, на момент игры т.к. вирус с таким именем 
																				//в будущем может иметь другие характеристики (распределение хитов, алгоритм и т.д)
				"занял_площадь" : 57,
				"произвел_клеток" : 400,
				"умерло_клеток" : 100,
				"убил_клеток_противника" : 300,
				...
			},
			"игрок_2" : {},
			...
		}
	}
	
	

//---------------------------------------------------------------
//------------------------------ ? ------------------------------
//---------------------------------------------------------------

	Вопрос: как мы все-таки будем хранить игровые поля (для просмотра игры потом)?
	Предлагаю определить (прописать в настройках) количество "срезов игры", не зависимо
	от длительности и результата, например 10. Итого мы храним просто 10 состояний
	игрового поля с информацией по нему: у какого игрока сколько клеток, какую площадь
	в процентах он занимает и т.д.
}

//Как вариант в этом объекте сделать управляюище игрой функции - главный цикл и вызовы
//обработчиков алгоритма, действия и т.д.

//---------- Игра (Конец)

